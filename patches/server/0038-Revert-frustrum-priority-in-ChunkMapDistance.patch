From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Tue, 9 Jun 2020 18:27:08 -0700
Subject: [PATCH] Revert frustrum priority in ChunkMapDistance

Causes long chunk loads in some cases. This diff is temporary
until these issues are resolved or until 1.16 rolls around and I rewrite
this damn system.

diff --git a/src/main/java/net/minecraft/server/ChunkMapDistance.java b/src/main/java/net/minecraft/server/ChunkMapDistance.java
index c002581af09a8296c46c9086883b47dfac3ca7c2..aaf7568612cfdcbeaaa7d3786806adca9f217a10 100644
--- a/src/main/java/net/minecraft/server/ChunkMapDistance.java
+++ b/src/main/java/net/minecraft/server/ChunkMapDistance.java
@@ -542,30 +542,31 @@ public abstract class ChunkMapDistance {
             if (flag != flag1) {
                 Ticket<?> ticket = new Ticket<>(TicketType.PLAYER, 33, new ChunkCoordIntPair(i)); // Paper - no-tick view distance
 
+                // Tuinity start - revert paper's entire diff
                 if (flag1) {
-                    // Paper start - smarter ticket delay based on frustum and distance
-                    scheduleChunkLoad(i, MinecraftServer.currentTick, (priority) -> {
-                        ChunkMapDistance.this.j.a(ChunkTaskQueueSorter.a(() -> { // CraftBukkit - decompile error
-                            if (chunkMap.playerViewDistanceNoTickMap.getObjectsInRange(i) != null && this.c(this.c(i))) { // Copy c(c()) stuff below
-                                // Paper end
+                    ChunkMapDistance.this.j.a(ChunkTaskQueueSorter.a(() -> { // CraftBukkit - decompile error
+                        ChunkMapDistance.this.m.execute(() -> {
+                            if (this.c(this.c(i))) {
                                 ChunkMapDistance.this.addTicket(i, ticket);
                                 ChunkMapDistance.this.l.add(i);
                             } else {
                                 ChunkMapDistance.this.k.a(ChunkTaskQueueSorter.a(() -> { // CraftBukkit - decompile error
                                 }, i, false));
                             }
+
+                        });
                     }, i, () -> {
-                        return priority; // Paper
-                    })); });
+                        return j;
+                    }));
                 } else {
                     ChunkMapDistance.this.k.a(ChunkTaskQueueSorter.a(() -> { // CraftBukkit - decompile error
                         ChunkMapDistance.this.m.execute(() -> {
                             ChunkMapDistance.this.removeTicket(i, ticket);
-                            ChunkMapDistance.this.clearPriorityTickets(new ChunkCoordIntPair(i)); // Paper
                         });
                     }, i, true));
                 }
             }
+            // Tuinity end - revert paper's entire diff
 
         }
 
