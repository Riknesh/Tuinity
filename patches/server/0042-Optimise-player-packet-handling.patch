From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Mon, 11 May 2020 08:38:31 -0700
Subject: [PATCH] Optimise player packet handling

Reduce the number of getCubes calls

diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 214d2466471e18968b6f33094462154232157b96..1750088dabefd1b1c0d86bb733f3cebe1b95330f 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -82,9 +82,9 @@ public class PlayerConnection implements PacketListenerPlayIn {
     // CraftBukkit end
     private int j;
     private final Int2ShortMap k = new Int2ShortOpenHashMap();
-    private double l;
-    private double m;
-    private double n;
+    private double l; private double getLastPosX() { return this.l; } // Tuinity - OBFHELPER
+    private double m; private double getLastPosY() { return this.m; } // Tuinity - OBFHELPER
+    private double n; private double getLastPosZ() { return this.n; } // Tuinity - OBFHELPER
     private double o;
     private double p;
     private double q;
@@ -137,6 +137,12 @@ public class PlayerConnection implements PacketListenerPlayIn {
     private boolean justTeleported = false;
     private boolean hasMoved; // Spigot
 
+    // Tuinity start - optimise packet checking collisions
+    static boolean isCollidingAt(Entity enitty, double x, double y, double z) {
+        return ((WorldServer)enitty.world).hasAnyCollisions(enitty, enitty.getBoundingBoxAt(x, y, z).shrink(1/16.0));
+    }
+    // Tuinity end - optimise packet checking collisions
+
     public CraftPlayer getPlayer() {
         return (this.player == null) ? null : (CraftPlayer) this.player.getBukkitEntity();
     }
@@ -964,7 +970,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 }
 
                 if (this.teleportPos != null) {
-                    if (this.e - this.A > 20) {
+                    if (false && this.e - this.A > 20) { // Tuinity - this will greatly screw with clients with > 1000ms RTT
                         this.A = this.e;
                         this.a(this.teleportPos.x, this.teleportPos.y, this.teleportPos.z, this.player.yaw, this.player.pitch);
                     }
@@ -1051,11 +1057,11 @@ public class PlayerConnection implements PacketListenerPlayIn {
                                 }
                             }
 
-                            boolean flag = this.a((IWorldReader) worldserver);
+                            // Tuinity - no longer needed
 
-                            d7 = d4 - this.o;
-                            d8 = d5 - this.p;
-                            d9 = d6 - this.q;
+                            d7 = d4 - this.getLastPosX(); // Tuinity
+                            d8 = d5 - this.getLastPosY(); // Tuinity
+                            d9 = d6 - this.getLastPosZ(); // Tuinity
                             if (d8 > 0.0D) {
                                 this.player.fallDistance = 0.0F;
                             }
@@ -1091,7 +1097,13 @@ public class PlayerConnection implements PacketListenerPlayIn {
                                 // Paper end
                             }
 
+                            // Tuinity start - optimise player move packet handling
+                            this.player.requiredRelaxedCollisionCheck = true;
+                            this.player.setPosition(this.getLastPosX(), this.getLastPosY(), this.getLastPosZ());
                             this.player.move(EnumMoveType.PLAYER, new Vec3D(d7, d8, d9));
+                            this.player.requiredRelaxedCollisionCheck = false;
+                            boolean collided = this.player.collidedOnSomething;
+                            // Tuinity end - optimise player move packet handling
                             // Paper start - prevent position desync
                             if (this.teleportPos != null) {
                                 return; // ... thanks Mojang for letting move calls teleport across dimensions.
@@ -1108,23 +1120,40 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
                             d9 = d6 - this.player.locZ();
                             d11 = d7 * d7 + d8 * d8 + d9 * d9;
-                            boolean flag1 = false;
-
-                            if (!this.player.H() && d11 > org.spigotmc.SpigotConfig.movedWronglyThreshold && !this.player.isSleeping() && !this.player.playerInteractManager.isCreative() && this.player.playerInteractManager.getGameMode() != EnumGamemode.SPECTATOR) { // Spigot
-                                flag1 = true;
-                                PlayerConnection.LOGGER.warn("{} moved wrongly!", this.player.getDisplayName().getString());
-                            }
-
+                            // Tuinity - no longer needed
                             this.player.setLocation(d4, d5, d6, f, f1);
                             this.player.checkMovement(this.player.locX() - d0, this.player.locY() - d1, this.player.locZ() - d2);
-                            if (!this.player.noclip && !this.player.isSleeping()) {
-                                boolean flag2 = this.a((IWorldReader) worldserver);
+                            // Tuinity start - optimise move packet handling
+                            if (collided && !this.player.noclip && !this.player.isSpectator()) {
+                                boolean allowed = d11 < org.spigotmc.SpigotConfig.movedWronglyThreshold;
+
+                                if (allowed) {
+                                    WorldServer world = ((WorldServer)this.player.world);
+
+                                    AxisAlignedBB collisionBoxBefore = this.player.getBoundingBoxAt(this.getLastPosX(), this.getLastPosY(), this.getLastPosZ()).shrink(0.0625);
+                                    AxisAlignedBB collisionBoxAfter = this.player.getBoundingBoxAt(toX, toY, toZ).shrink(0.0625);
+
+                                    // do not allow moving into NEW blocks.
+                                    java.util.List<AxisAlignedBB> collisionsAfter = new java.util.ArrayList<>(6);
+                                    world.getCollisions(this.player, collisionBoxAfter, collisionsAfter, false);
+
+                                    for (int index = 0, len = collisionsAfter.size(); index < len; ++index) {
+                                        AxisAlignedBB box = collisionsAfter.get(index);
+                                        if (!box.intersects(collisionBoxBefore)) {
+                                            // weren't colliding before. not allowed
+                                            allowed = false;
+                                            break;
+                                        }
+                                    }
+                                }
 
-                                if (flag && (flag1 || !flag2)) {
-                                    this.a(d0, d1, d2, f, f1);
+                                if (!allowed) {
+                                    PlayerConnection.LOGGER.warn("{} moved wrongly! Was colliding: " + isCollidingAt(this.player, this.getLastPosX(), this.getLastPosY(), this.getLastPosZ()) + ", is colliding: " + isCollidingAt(this.player, toX, toY, toZ), this.player.getDisplayName().getString());
+                                    this.teleport(d0, d1, d2, f, f1);
                                     return;
                                 }
                             }
+                            // Tuinity end - optimise move packet handling
 
                             // CraftBukkit start - fire PlayerMoveEvent
                             // Rest to old location first
@@ -1208,6 +1237,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
         return iworldreader.getCubes(this.player, this.player.getBoundingBox().shrink(9.999999747378752E-6D));
     }
 
+    public final void teleport(double d0, double d1, double d2, float f, float f1) { this.a(d0, d1, d2, f, f1); } // Tuinity - OBFHELPER
     public void a(double d0, double d1, double d2, float f, float f1) {
         this.a(d0, d1, d2, f, f1, Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet());
     }
