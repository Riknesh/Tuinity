From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Sun, 14 Jun 2020 22:21:32 -0700
Subject: [PATCH] Prevent allocation of Long by the light engine for getting
 NibbleArray

Caused a high allocation rate

diff --git a/src/main/java/net/minecraft/server/LightEngineStorage.java b/src/main/java/net/minecraft/server/LightEngineStorage.java
index cd30c8e403f91e8cdf87f2f766d4738b35984cdc..2850b81e297c443aa781d6e9ee22f4eee807faad 100644
--- a/src/main/java/net/minecraft/server/LightEngineStorage.java
+++ b/src/main/java/net/minecraft/server/LightEngineStorage.java
@@ -49,7 +49,7 @@ public abstract class LightEngineStorage<M extends LightEngineStorageArray<M>> e
             return this.updating.getUpdatingOptimized(i);
         } else {
             synchronized (this.visibleUpdateLock) {
-                return this.e_visible.lookup.apply(i);
+                return this.e_visible.data.getVisibleAsync(i); // Tuinity - remove allocation here
             }
         }
         // Paper end - avoid copying light data
@@ -77,7 +77,7 @@ public abstract class LightEngineStorage<M extends LightEngineStorageArray<M>> e
         NibbleArray nibblearray = this.updating.getUpdatingOptimized((((long) (x >> 4) & 4194303L) << 42) | (((long) (y >> 4) & 1048575L)) | (((long) (z >> 4) & 4194303L) << 20));
         //  BUG: Sometimes returns null and crashes, try to recover, but to prevent crash just return no light.
         if (nibblearray == null) {
-            nibblearray = this.e_visible.lookup.apply((((long) (x >> 4) & 4194303L) << 42) | (((long) (y >> 4) & 1048575L)) | (((long) (z >> 4) & 4194303L) << 20));
+            nibblearray = this.e_visible.data.getVisibleAsync((((long) (x >> 4) & 4194303L) << 42) | (((long) (y >> 4) & 1048575L)) | (((long) (z >> 4) & 4194303L) << 20)); // Tuinity - remove allocation here
         }
         if (nibblearray == null) {
             System.err.println("Null nibble, preventing crash " + BlockPosition.fromLong(i));
diff --git a/src/main/java/net/minecraft/server/LightEngineStorageArray.java b/src/main/java/net/minecraft/server/LightEngineStorageArray.java
index 53c204455c3800b4fe399ce6261b0495eea4d003..f7d5e856f17b7d19bd04ed00bea43a6037b6a2f8 100644
--- a/src/main/java/net/minecraft/server/LightEngineStorageArray.java
+++ b/src/main/java/net/minecraft/server/LightEngineStorageArray.java
@@ -10,7 +10,7 @@ public abstract class LightEngineStorageArray<M extends LightEngineStorageArray<
     private boolean d;
     protected final com.destroystokyo.paper.util.map.QueuedChangesMapLong2Object<NibbleArray> data; // Paper - avoid copying light data
     protected final boolean isVisible; // Paper - avoid copying light data
-    java.util.function.Function<Long, NibbleArray> lookup; // Paper - faster branchless lookup
+    //java.util.function.Function<Long, NibbleArray> lookup; // Paper - faster branchless lookup // Tuinity - not even branchless, causes alloction issues too
 
     // Paper start - avoid copying light data
     protected LightEngineStorageArray(com.destroystokyo.paper.util.map.QueuedChangesMapLong2Object<NibbleArray> data, boolean isVisible) {
@@ -19,11 +19,7 @@ public abstract class LightEngineStorageArray<M extends LightEngineStorageArray<
         }
         this.data = data;
         this.isVisible = isVisible;
-        if (isVisible) {
-            lookup = data::getVisibleAsync;
-        } else {
-            lookup = data::getUpdating;
-        }
+        // Tuinity - revert
         // Paper end - avoid copying light data
         this.c();
         this.d = true;
@@ -40,7 +36,7 @@ public abstract class LightEngineStorageArray<M extends LightEngineStorageArray<
     }
 
     public boolean b(long i) {
-        return lookup.apply(i) != null; // Paper - avoid copying light data
+        return (this.isVisible ? this.data.getVisibleAsync(i) : this.data.getUpdating(i)) != null; // Paper - avoid copying light data // Tuinity - remove allocation here
     }
 
     // Paper start - less branching as we know we are using cache and updating
@@ -72,7 +68,7 @@ public abstract class LightEngineStorageArray<M extends LightEngineStorageArray<
             }
         }
 
-        NibbleArray nibblearray = lookup.apply(i); // Paper - avoid copying light data
+        NibbleArray nibblearray = (this.isVisible ? this.data.getVisibleAsync(i) : this.data.getUpdating(i)); // Paper - avoid copying light data // Tuinity - remove allocation here
 
         if (nibblearray == null) {
             return null;
